#!/usr/bin/env -S go tool git.sr.ht/~charles/rq/cmd/rq
# rq: query data.script.main
# rq: output /dev/null

# METADATA
# title: Regal build tasks
# description: |
#   This is the `rq` build tasks used by the Regal project. Note that `rq` is possibly not
#   intended as a build tool, but if we can lint Rego with Rego, surely we can build Regal
#   with Rego too?
#
#   To run one or more tasks, make sure to first have `rq` installed
#   (https://git.sr.ht/~charles/rq), then from the project root directory, run:
#
#   build/do.rq <tasks>
#
#   For example, to run the `test` task, run:
#
#   build/do.rq test
#
# authors:
#   - https://github.com/StyraInc/regal/graphs/contributors
# related_resources:
#   - description: rq
#     ref: https://git.sr.ht/~charles/rq
package script

import future.keywords

# Path to Regal's project root. (./build/do.rq/../.. => ./)
regal_root := rq.abs(rq.dir(rq.dir(rq.scriptpath())))

build_dir := rq.joinpath([regal_root, "build"])

# Root of the directory hierarchy where engine-specific capabilities JSON for
# embedding into the Regal binary should be placed.
embedded_caps_dir := rq.joinpath([regal_root, "internal", "capabilities", "embedded"])

# Directory where EOPA-specific JSON capabilities for embedding should be
# placed.
eopa_caps_dir := rq.joinpath([embedded_caps_dir, "eopa"])

main contains do[what] if some what in rq.args()

main contains job[what] if some what in rq.args()

main contains job.tasks if {
	count(rq.args()) == 0
	print("No task(s) provided. Available tasks:")
	print()
}

main contains null if {
	count(rq.args()) == 1
	rq.args()[0] == "--help"

	print(rego.metadata.chain()[1].annotations.description)
}

# METADATA
# title: pull_request
# description: Run all task to verify a pull request
do contains "pull_request" if {
	some x in ["test", "lint", "e2e", "check_readme"]
	github("::group::", x)
	job[x]
	github("::endgroup::", x)
}

# METADATA
# title: tasks
# description: Prints the name of all available tasks
job contains "tasks" if {
	build(false)
	some task in tasks
	print("-", sprintf("%-20s", [task[0]]), "\t", strings.replace_n({"\n": ""}, task[1]))
}

# METADATA
# title: pr
# description: |
#   Run all recommended tasks before submitting a PR
# related_resources:
#   - https://github.com/daixiang0/gci
#   - https://github.com/mvdan/gofumpt
#   - https://github.com/golangci/golangci-lint
#   - https://github.com/open-policy-agent/opa
job contains "pr" if {
	run("go mod tidy")
	run("npm install --silent --prefix build")

	build(true)

	# format
	fmt_all
	write_readme
	golangcilintfix

	# verify
	golangcilint
	lint
	test
	e2e
}

# METADATA
# title: test
# description: Run all Regal unit tests (Go and Rego)
job contains "test" if {
	test
}

# METADATA
# title: fetch
# description: Fetch third-party artifacts, such as capabilities JSON files for engines.
job contains "fetch" if {
	fetch_engine_caps
}

# METADATA
# title: lint
# description: Run `regal lint` on the Regal bundle
job contains "lint" if {
	build(true)
	lint_ci
}

# METADATA
# title: e2e
# description: Run the Regal end-to-end tests
job contains "e2e" if {
	build(true)
	e2e
}

# METADATA
# title: check_readme
# description: Verify that the rules table in the README is up-to-date
job contains "check_readme" if {
	build(true)
	check_readme
}

build(true) if {
	run("go build -tags=regal_standalone")
}

build(false) if {
	not binary_present
	run("go build -tags=regal_standalone")
} else := true

# any binary is good enough when calling `build(false)`, it doesn't need to be
# built freshly
binary_present if {
	some f in rq.tree(".", {"maxdepth": 1})
	f.base == "regal"
	f.is_dir == false
}

test if {
	run("go test ./...")
	run("go run main.go test bundle")
}

e2e if {
	# NOTE: e2e tests depend on the executable, so go should not cache their result (count=1 enforces that)
	run("go test -tags e2e ./e2e -count=1")
	run("go test -tags integration ./internal/capabilities")
}

lint if {
	run("opa check --strict --capabilities build/capabilities.json bundle")
	run("./regal lint --format pretty bundle")
	run("npx --prefix build markdownlint --config docs/.markdownlint.yaml --ignore docs/CODE_OF_CONDUCT.md README.md docs/")
	run("npx --prefix build dprint --config build/dprint.json check")
}

lint_ci if {
	run("opa check --strict --capabilities build/capabilities.json bundle")
	run_quiet("./regal lint --format github bundle")
	run("npx --prefix build markdownlint --config docs/.markdownlint.yaml --ignore docs/CODE_OF_CONDUCT.md README.md docs/")
	run("npx --prefix build dprint --config build/dprint.json check")
}

check_readme if {
	run("./regal table --compare-to-readme bundle")
}

write_readme if {
	run("./regal table --write-to-readme bundle")
}

fetch_engine_caps if {
	fetch_eopa_caps
}

fetch_eopa_caps if {
	# git ls-remote --tags output looks like this:
	#
	#	...
	#	bab5bdd4bb2de45c7d1bcf5d7b5df3c61a131f38        refs/tags/v1.0.0
	#	bab5bdd4bb2de45c7d1bcf5d7b5df3c61a131f38        refs/tags/v1.0.1
	#	9ace37dda9859a1afd2fcd6a87dd7f1955be4dc4        refs/tags/v1.10.1
	#	...
	#
	# so .stdout will look like this:
	#
	#	...
	#	[
	#		"bab5bdd4bb2de45c7d1bcf5d7b5df3c61a131f38\trefs",
	#		"tags",
	#		"v1.0.0"
	#	],
	#	[
	#		"bab5bdd4bb2de45c7d1bcf5d7b5df3c61a131f38\trefs",
	#		"tags",
	#		"v1.0.1"
	#	],
	#	[
	#		"bab5bdd4bb2de45c7d1bcf5d7b5df3c61a131f38\trefs",
	#		"tags",
	#		"v1.1.0"
	#	],
	#	...

	print("fetching tags for enterprise-opa repository")

	eopa_tags_result := rq.run(
		[
			"git",
			"ls-remote",
			"--tags",
			"https://github.com/styrainc/enterprise-opa",
		],
		{"stdout_spec": {
			"format": "raw",
			"options": {
				"raw.fs": "/",
				"raw.rs": "[\n\r]",
			},
		}},
	)

	error_nonzero(eopa_tags_result, "failed to fetch tags from GitHub")

	# We assume that tags and capabilities files are 1:1, but some EOPA
	# release tags in the past did not correctly get capabilities files, so
	# we eliminate them from consideration.

	known_bad_tags := {
		"v1.15.0", # tag missing capabilities file (misnamed v0.15.0)
		"v1.4.1", # tag missing capabilities file
		"v1.5.0", # tag missing capabilities file
	}

	# Note that we use the `not startswith` to explicitly drop any
	# pre-1.0.0 tags. There is little reason anyone would want them, and if
	# they really have a need, they can manually download them and use the
	# file locally.

	eopa_tags := {
	t |
		some r in eopa_tags_result.stdout
		t := r[2]
		not known_bad_tags[t]
		not startswith(t, "v0.")
	}

	# Get a directory listing for the capabilities directory, filtering for
	# only nonzero size files with JSON extensions. The size check is to
	# avoid long-tail edge cases where we crashed after opening the file
	# for writing but before committing any content.
	eopa_caps_tree := {p: f |
		f := rq.tree(eopa_caps_dir, {})[p]
		f.size != 0
		f.ext == "json"
	}

	# Determine which capabilities files are missing, what URL they
	# should be fetched from, and where they should end up on disk.
	missing_locally := {
	{"local": p, "remote": r} |
		# construct the local path we expect the caps to exist at
		t := eopa_tags[_]
		p := rq.joinpath([eopa_caps_dir, sprintf("%s.json", [t])])

		not eopa_caps_tree[p]

		# construct the URL to fetch the content from
		r := rq.template("https://raw.githubusercontent.com/StyraInc/enterprise-opa/main/capabilities/{{.tag}}.json", {"tag": t})
	}

	print(sprintf("fetching %d capabilities files missing locally", [count(missing_locally)]))

	# Download the capabilities from the constructed URLs.
	new_caps := {
	{"local": m.local, "content": c} |
		m := missing_locally[_]
		print("\tfetching ", m.remote)
		resp := http.send({"url": m.remote, "method": "GET"})

		{rq.error(sprintf("non-200 status code '%d' for URL '%s'", [resp.status_code, m.remote])) | resp.status_code != 200}

		c := resp.raw_body
	}

	# Commit the retrieved content to disk.
	{
	rq.write(cap.content, {"format": "raw", "file_path": cap.local}) |
		some cap in new_caps
	}
}

fmt_all if {
	opafmt
}

opafmt if {
	run("opa fmt --write bundle")
}

golangcilint if {
	run("golangci-lint run ./...")
}

golangcilintfix if {
	run("golangci-lint run --fix ./...")
}

tasks := sort([[annotation.title, annotation.description] |
	# Right, like you never used the AST for reflection?
	some annotation in json.unmarshal(rq.run(["./regal", "parse", rq.scriptpath()], {}).stdout).annotations
	annotation.scope == "rule"
])

run(cmd) if {
	print(cmd)
	args := split(cmd, " ")
	out := rq.run(args, {})
	{rq.error(sprintf("\nstdout: %s\nstderr: %s", [out.stdout, out.stderr])) | out.exitcode != 0}
	print(out.stdout)
}

run_quiet(cmd) if {
	print(cmd)
	args := split(cmd, " ")
	out := rq.run(args, {})
	print(out.stdout)
	{true |
		out.exitcode != 0
		print(out.stderr)
		rq.error("")
	}
}

github(what, j) if {
	is_github
	print(what, j)
} else := true

is_github if rq.env().GITHUB_ACTION

error_nonzero(run_result, message) if {
	run_result.exitcode != 0
	rq.error(sprintf("%s\nstdout:%s\nstderr:\n%s\n", [message, run_result.stdout, run_result.stderr]))
} else = true
